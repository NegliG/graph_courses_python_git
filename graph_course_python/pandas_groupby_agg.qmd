## Imports


```{python}
import pandas as pd
import numpy as np
```

## Data

```{python}
yao = pd.read_csv("data/yaounde_mini.csv")
yao
```

```{python}
## Classical
yao["age"].mean()
```

```{python}
## agg
yao.agg(mean_age = ("age", "mean")) # tuple
```

Syntax:
df.agg(summary_name = ("column to summarize", "summary function"))

```{python}
yao.agg(mean_age = ("age", "mean"), median_age = ("age", "median"))
```

## Practice Q: Mean and median weight

Use 'agg()' and the relevant summary functions to obtain the mean and median of respondent weights from the 'weight_kg' variable of the 'yao' data frame.

```{python}
yao.agg(mean_weight = ("weight_kg", "mean"), median_weight = ("weight_kg", "median"))
```

## Intriduce groupby

```{python}
yao.groupby("sex")
```

```{python}
yao.groupby("sex").agg(mean_age = ("age", "mean"), median_age = ("age", "median")).reset_index()
```

```{python}
(
yao.
    groupby("sex")
    .agg(mean_age = ("age", "mean"), median_age = ("age", "median"))
    .reset_index()
)
```

```{python}
yao.groupby("sex").agg(
    mean_age=("age", "mean"), median_age=("age", "median")
).reset_index()
```

Max & min weights + num of inds per neighbourhood

```{python}
(
    yao.groupby("neighborhood")
    .agg(
        max_weight = ("weight_kg", "max"),
        min_weight = ("weight_kg", "min"),
        num_inds = ("weight_kg", "size")
    )
    .reset_index()
)
```

## Practice Q: Min and max height per sex

Use 'group_by', 'agg()', and the relevant summary functions to obtain the minimum and maximum heights for each sex in the 'yao' data frame, as well as the number of individuals in each sex group.

```{python}
height_df = pd.DataFrame(
   yao.groupby("sex")
    .agg(
        min_height_cm = ("height_cm", "min"),
        max_height_cm = ("height_cm", "max"),
        count = ("height_cm", "size")
    )
    .reset_index()
)

height_df
```


## Nested grouping

```{python}
(
    yao.groupby(["neighborhood", "sex"])
    .agg(
        max_weight = ("weight_kg", "max"),
        min_weight = ("weight_kg", "min"),
        num_inds = ("weight_kg", "size")
    )
    .reset_index()
)
```

## Practice Q/: Min and max height per age sex group

Use 'group_by()', and 'min()' and 'max()' to get the minimum and maximum height for each age-sex group in the 'yao' data frame. The variables needed are 'age_category_3' and 'sex'.

```{python}
age_sex_height_df = pd.DataFrame(
   yao.groupby(["age_category_3", "sex"])
    .agg(
        min_height_cm = ("height_cm", "min"),
        max_height_cm = ("height_cm", "max")
    )
    .reset_index()
)

age_sex_height_df
```

## NaN

```{python}
(
yao.groupby("is_smoker")
    .agg(weight_mean = ("weight_kg", "mean"))
)
```

```{python}
(
yao.groupby("is_smoker", dropna = False)
    .agg(weight_mean = ("weight_kg", "mean"),
    count = ("weight_kg", "size"))
)
```

## Practice Q: Mean weight by pregnancy status

Use 'groupby()', 'agg()', and the 'mean()' function to obtain the mean weight (kg) by pregnancy status in the 'yao' data frame. Include individuals with NaN pregnancy status in the summary table.

```{python}
preg_stat = (
yao.groupby("is_pregnant", dropna = False)
    .agg(weight_mean = ("weight_kg", "mean"))
)

preg_stat
```

## Custom stats with lambda functions

```{python}
def range_func(x):
    return max(x) - min(x)

range_func([1, 5, 6])
```

Using a lambda

```{python}
range_func = lambda x: max(x) - min(x)
range_func([1, 5, 6])
```

Rang of weights per neighborhoods

```{python}
(
    yao.groupby("neighborhood")
    .agg(weight_range = ("weight_kg", lambda x: max(x) - min(x)))
)
```

Coefficient of variation: (std / mean) * 100

```{python}
(
    yao.groupby("neighborhood")
    .agg(weight_range = ("weight_kg", lambda x: (x.std() / x.mean()) * 100))
)
```

## Practice Q: IQR of age by neighborhood

Find the interquartile range (IQR) of the age variable for each neighborhood. The IQR is the difference between the 75th and 25th percentiles. Your lambda will look like this: 'lambda x: x.quantile(0.75) - x.quantile(0.25)'.

```{python}
(
    yao.groupby("neighborhood")
    .agg(IQR_age = ("age", lambda x: x.quantile(0.75) - x.quantile(0.25)))
)
```



































