## Imports


```{python}
import pandas as pd
import plotly.express as px
```

## Data

```{python}
# Temperatures dataset
temperatures = pd.DataFrame(
    {
        "country": ["Sweden", "Denmark", "Norway"],
        "1994": [1, 2, 3],
        "1995": [3, 4, 5],
        "1996": [5, 6, 7],
    }
)
```

```{python}
# Fuels Wide dataset
fuels_wide = pd.read_csv("data/fuels_wide.csv")
```

```{python}
# Eurostat Births Wide dataset
euro_births_wide = pd.read_csv("data/euro_birth_wide.csv")
```

```{python}
# Contracts dataset
contracts = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/chicago_contracts_20_23.csv"
)
```

NOT WORKING FOR ME

```{python}
# Population dataset
population = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/tidyr_population.csv"
)
```

NOT WORKING FOR ME

```{python}
temperatures
```

I think this is a wide format data.

## When to use wide vs long data

Wide: Displaying information
Long: Analysis or plotting

## Reshape from Wide to Long with melt()

```{python}
fuels_wide
```

```{python}
fuels_wide.melt(id_vars = ["Entity", "Code"])
```

```{python}
fuels_long = fuels_wide.melt(id_vars = ["Entity", "Code"], var_name = "year", value_name = "oil_consumption")
```

```{python}
fuels_long["year"] = fuels_long["year"].str_replace("y_", "").astype(int)
fuels_long
```

## Practice Q: Temperatures to Long

Convert the temperatures dataset shown below into a long format. Your answer should have the following column names: “country”, “year”, and “avg_temp”.

```{python}
temperatures_long = temperatures.melt(id_vars = ["country"], var_name = "year", value_name = "avg_temp")

temperatures_long
```

## Practice Q: Eurostat Births to Long

For this practice question, you will use the euro_births_wide dataset from Eurostat. It shows the annual number of births in 50 European countries:

```{python}
euro_births_wide
```

The data is in a wide format. Convert it to a long format DataFrame that has the following column names: “country”, “year”, and “births_count”.

Remove the x prefix from the year columns and convert them to integers.

```{python}
euro_births_long = euro_births_wide.melt(id_vars = ["country"], var_name = "year", value_name = "birth_count")

euro_births_long
```

```{python}
euro_births_long["year"] = euro_births_long["year"].str_replace("x", "").astype(int)
```

## Using Long Data for Analysis

```{python}
fuels_wide.head()
```

```{python}
fuels_long.head()
```

```{python}
## Long format
fuels_long.groupby("Entity")["oil_consumption"].mean()
```

```{python}
## Wide format
fuels_wide[['y_1970', 'y_1980', 'y_1990', 'y_2000', 'y_2010', 'y_2020']].mean(axis=1)
```

```{python}
## Long format data plotting
subset = fuels_long.query('Entity in ["Peru", "Iran", "China"]')
px.line(subset, x = "year", y = "oil_consumption", color = "Entity")
```

## From Long to Wide

```{python}
contracts_summary = contracts.groupby("state")["year"].value_counts().reset_index()
contracts_summary
```

```{python}
contracts_wide = contracts_summary.pivot(
    index = "state", columns = "year", values = "count"
).reset_index()
contracts_wide.head()
```

As you can see, pivot() has three important arguments:

1. index defines which column(s) to use as the new index. In our case, it’s the “state” since we want each row to represent one state.
2. columns identifies which variable to use to define column names in the wide format. In our case, it’s the “year”. You can see that the years are now the column names.
3. values specifies which values will become the core of the wide data format. In our case, it’s the number of contracts “count”.

```{python}
contracts_wide_year = contracts_summary.pivot(
    index = "year", columns = "state", values = "count"
).reset_index()
contracts_wide_year
```

## Practice Q: Temperatures back to Wide

Convert the long temperatures_long dataset you created above back to a wide format. Your answer should have the following column names: “country”, “1994”, “1995”, and “1996”.

```{python}
temperatures_wide = temperatures_long.pivot(
    index = "country", columns = "year", values = "avg_temp"
).reset_index()

temperatures_wide
```

## Practice Q: Population to Wide

The population dataset shows the populations of 219 countries over time.

Reshape this data into a wide format.

```{python}
population_wide = population.pivot(
    index = "country", columns = "year", values = "population"
).reset_index()

population_wide
```



