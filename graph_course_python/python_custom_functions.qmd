
# Imports


```{python}
import pandas as pd
import numpy as np
import vega_datasets as vd
```

# Basics of functions


```{python}
def pounds_to_kg(pounds):
    return pounds * 0.4536
```


```{python}
pounds_to_kg(pounds = 190)
```

```{python}
print(pounds_to_kg(190))
print(pounds_to_kg(pounds = 190))
```

# Using inside a dataframe

```{python}
pounds_df = pd.DataFrame({"pounds": [150, 200, 250]})
pounds_df
```

```{python}
pounds_to_kg(pounds_df['pounds'])
```


```{python}
pounds_df['kg'] = pounds_to_kg(pounds_df['pounds'])
pounds_df
```

# Practice Q: Age in Months

Create a function called 'years_to_months' that transforms age in years to age in months.

Use it on the 'riots_df' DataFrame imported below to create a new column called 'age_months'.

```{python}
riots_df = vd.data.la_riots()
riots_df
```

```{python}
# Function years_to_months
def years_to_months(years):
    return years * 12
```

```{python}
riots_df["age_months"] = years_to_months(riots_df["age"])
riots_df
```

# Functions with Multiple Arguments

```{python}
def calc_calories(carb_grams, protein_grams, fat_grams):
    result = (carb_grams * 4) + (protein_grams * 4) + (fat_grams * 9)
    return result
```

```{python}
calc_calories(carb_grams=50, protein_grams=25, fat_grams=15)
```

```{python}
# default arguments
def calc_calories2(carb_grams=0, protein_grams=0, fat_grams=0):
    result = (carb_grams * 4) + (protein_grams * 4) + (fat_grams * 9)
    return result
```

```{python}
# works with zero or all arguments
calc_calories2(carb_grams=50)
```

```{python}
food_df = pd.DataFrame({
    "food": ["Appel", "Avocado"],
    "carb": [25, 10],
    "protein": [0, 1],
    "fat": [0, 14]
})

food_df
```

```{python}
calc_calories2(carb_grams=food_df["carb"], protein_grams=food_df["protein"], fat_grams=food_df["fat"])

calc_calories2(food_df["carb"], food_df["protein"], food_df["fat"])
```

```{python}
food_df['calories'] = calc_calories2(food_df["carb"], food_df["protein"], food_df["fat"])

food_df
```

# Practice Q: BMI Function

Create a function named 'calc_bmc' that calculates the Body Mass Index (BMI) for one or more individuals, then apply the funtion by running the code chunk further below.

The formula for BMI is weight (kg) divided by height squared.

```{python}
# BMI formula

def calc_bmi(weight = 0, height = 0):
    result = weight / (height * height)
    return result
```

```{python}
bmi_df = pd.DataFrame({
    'Weight': [70, 80, 100], # in kg
    'Height': [1.7, 1.8, 1.2] # in meters
})
bmi_df['BMI'] = calc_bmi(bmi_df['Weight'], bmi_df['Height'])
bmi_df
```

# Intro to Conditionals: if, elif, else

```{python}
def class_num(num):
    if num > 0:
        return "Positive"
    elif num < 0:
        return "Negative"
    elif num == 0:
        return "Zero"
    else:
        return "Invalid"

print(class_num(5))
print(class_num(0))
print(class_num(-5))
print(class_num(np.nan))
```

# Using on a dataframe

```{python}
num_df = pd.DataFrame({
    "num": [10, -5, 0]
})
num_df
```

```{python}
class_num_vec = np.vectorize(class_num)
```

```{python}
num_df['Category'] = class_num_vec(num_df['num'])
num_df
```

# Grading example

```{python}
def categorize_grade(grade):
    if grade >= 85:
        return "Excellent"
    elif grade >= 60 and grade < 85:
        return "Pass"
    elif grade >= 0 and grade < 60:
        return "Fail"
    else:
        return "Invalid grade"

categorize_grade(70)
```

```{python}
categorize_grade_vec = np.vectorize(categorize_grade)
```

```{python}
categorize_grade_vec([70, 80, 100])
```

# Practice Q: Age Categorization

Now, try writing a function that categorizes age into diferent stages.
Use the following criteria:

- If the age is under 18, 'Minor'
- Greater than or equal to 18 and less than 65, 'Adult'
- Greater than or equal to 65, 'Senior'
- Negative of invalid age, 'Invalid age'

Use it on the 'riots_df' DataFrame to creat a new column called Age_Category.


```{python}
riots_df = vd.data.la_riots()
riots_df
```

```{python}
def categorize_age(age):
    if age >= 0 and age < 18:
        return "Minor"
    elif age >= 18 and age < 65:
        return "Adult"
    elif age >= 65:
        return "Senior"
    else:
        return "Invalid age"
```

```{python}
# Vectorization of our function
categorize_age_vec =  np.vectorize(categorize_age)
```

```{python}
riots_df['Age_Category'] = categorize_age_vec(riots_df['age'])
riots_df
```

```{python}
riots_df[["age", "Age_Category"]]
```
